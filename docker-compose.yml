version: '3.8'

services:
  # MySQL Database
  mysql:
    image: mysql:8.0
    container_name: saas-erp-mysql
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: root123
      MYSQL_DATABASE: saas_erp
      MYSQL_USER: saas_user
      MYSQL_PASSWORD: saas_password
    ports:
      - "3306:3306"
    volumes:
      - mysql_data:/var/lib/mysql
    networks:
      - saas-erp-network
    command: --default-authentication-plugin=mysql_native_password

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: saas-erp-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - saas-erp-network
    command: redis-server --appendonly yes

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: saas-erp-backend
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      NODE_ENV: production
      PORT: 3000
      DB_HOST: mysql
      DB_PORT: 3306
      DB_NAME: saas_erp
      DB_USER: saas_user
      DB_PASSWORD: saas_password
      REDIS_HOST: redis
      REDIS_PORT: 6379
    volumes:
      - ./backend:/app
      - /app/node_modules
      - backend_uploads:/app/uploads
      - backend_logs:/app/logs
      - backend_sessions:/app/sessions
    depends_on:
      - mysql
      - redis
    networks:
      - saas-erp-network

  # Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: saas-erp-frontend
    restart: unless-stopped
    ports:
      - "3001:3000"
    environment:
      NODE_ENV: production
      NEXT_PUBLIC_API_URL: http://localhost:3000/api/v1
    volumes:
      - ./frontend:/app
      - /app/node_modules
      - /app/.next
    depends_on:
      - backend
    networks:
      - saas-erp-network

  # Nginx Reverse Proxy (Optional)
  nginx:
    image: nginx:alpine
    container_name: saas-erp-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - backend
      - frontend
    networks:
      - saas-erp-network

volumes:
  mysql_data:
    driver: local
  redis_data:
    driver: local
  backend_uploads:
    driver: local
  backend_logs:
    driver: local
  backend_sessions:
    driver: local

networks:
  saas-erp-network:
    driver: bridge

